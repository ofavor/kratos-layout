// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/ofavor/kratos-layout/internal/app"
	"github.com/ofavor/kratos-layout/internal/conf"
	"github.com/ofavor/kratos-layout/internal/iface"
	"github.com/ofavor/kratos-layout/internal/infra"
	"github.com/ofavor/kratos-layout/internal/infra/repo"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(server *conf.Server, components *conf.Components, logger log.Logger) (*kratos.App, func(), error) {
	database := infra.NewDatabase(components)
	cache := infra.NewCache(components)
	eventBus := infra.NewEvent(components)
	greeterRepo := repo.NewGreeterRepo(database)
	infraInfra := infra.NewInfra(database, cache, eventBus, greeterRepo)
	greeterAppService := app.NewGreeterAppService(infraInfra, logger)
	grpcServer := iface.NewGRPCServer(server, greeterAppService, logger)
	httpServer := iface.NewHTTPServer(server, greeterAppService, logger)
	myEventAppService := app.NewMyEventAppService(logger)
	eventHandler := iface.NewEventHandler(infraInfra, myEventAppService, logger)
	kratosApp := newApp(logger, grpcServer, httpServer, eventHandler, infraInfra)
	return kratosApp, func() {
	}, nil
}
